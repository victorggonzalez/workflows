name: TEST new backend to staging environment

# Controls when the action will run.
on:
  workflow_dispatch:

jobs:
  generate-info:
    name: Generate info
    runs-on: ubuntu-latest
    outputs:
      fileName: ${{ steps.latest-file.outputs.latest }}
      backendRepository: ${{ steps.backend.outputs.repository }}
      backendTag: ${{ steps.backend2.outputs.tag }}
      stack: ${{ steps.stack-json.outputs.stack }}
    # environment: 
    #   name: staging
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Get latest versions file
      id: latest-file
      run: |
        cd ./release-versions
        LATEST_FILE_NAME=$(ls -Ar | head -n 1)
        echo ::set-output name=latest::${LATEST_FILE_NAME}

    - name: Generate backend info
      id: backend
      env:
        LATEST_FILE: ${{ steps.latest-file.outputs.latest }}
      run: |
        echo $LATEST_FILE
        jq '(.include[:1] | .[] | .repo)' ./release-versions/$LATEST_FILE_NAME

    - name: Generate stack json
      id: stack-json
      env:
        LATEST_FILE: ${{ steps.latest-file.outputs.latest }}
      run: |
        STACK=jq '(.include[1:] | .[])' ./release-versions/$LATEST_FILE_NAME
        echo ::set-output name=stack::${STACK//'%'/'%25'}

  dispatch-backend:
    name: Dispatch Continuous Delivery workflow in backend
    needs: generate-info
    runs-on: ubuntu-latest
    env: 
      REPOSITORY: ${{(needs.generate-info.outputs.backendRepository)}}
      TAG: ${{fromJson(needs.generate-info.outputs.backendTag)}}
      LATEST_FILE_NAME: ${{needs.generate-info.outputs.fileName}}
    steps:
    - name: test matrix
      id: test-matrix
      run: |
        echo $REPOSITORY
        echo $TAG
        echo $LATEST_FILE_NAME

    - name: Set json output
      id: set-json
      run: |
        JSON=$(jq --null-input --arg tag "$TAG" '{"tag": $tag}')
        echo ::set-output name=json::${JSON//'%'/'%25'}

    # Dispatch deployment
    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        repository: $REPO
        event-type: staging-deployment
        client-payload: ${{steps.set-json.outputs.json}}

    - name: Pause for 25 seconds
      run: |
        echo "success waiting"
        sleep 25

  dispatch-stack:
    name: Dispatch Continuous Delivery workflow in stack
    needs: dispatch-backend
    runs-on: ubuntu-latest
    env: 
      STACK: ${{(needs.generate-info.outputs.stack)}}
      LATEST_FILE_NAME: ${{needs.generate-info.outputs.fileName}}
    strategy:
      matrix:
        include: ${{(needs.generate-info.outputs.stack)}}
    steps:
    - name: test matrix
      id: test-matrix
      run: |
        echo $STACK
        echo $LATEST_FILE_NAME
    - run: echo ${{matrix.repo}}

    - run: echo ${{matrix.tag}}

    - name: Set json output
      id: set-json
      env:
        TAG: ${{matrix.tag}}
      run: |
        JSON=$(jq --null-input --arg tag "$TAG" '{"tag": $tag}')
        echo ::set-output name=json::${JSON//'%'/'%25'}

    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        repository: ${{ matrix.repo }}
        event-type: staging-deployment
        client-payload: ${{steps.set-json.outputs.json}}

    # # Dispatch status check
    # - name: Dispatch Api status check
    #   uses: peter-evans/repository-dispatch@v2
    #   with:
    #     token: ${{ secrets.REPO_ACCESS_TOKEN }}
    #     repository: victorggonzalez/workflows
    #     event-type: check-status
    #     client-payload: '{"tag": "${{ env.TAG }}", "file": "${{ env.LATEST_FILE_NAME }}", "attemptNumber": 1}'
