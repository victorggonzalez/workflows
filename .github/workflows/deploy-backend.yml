name: TEST new backend to staging environment

# Controls when the action will run.
on:
  workflow_dispatch:

jobs:
  generate-matrix:
    name: Generate matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    environment: 
      name: staging
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Get latest versions file
      id: latest-file
      run: |
        cd ./release-versions
        LATEST_FILE_NAME=$(ls -Ar | head -n 1)
        echo ::set-output name=latest::${LATEST_FILE_NAME}

    - name: Generate matrix
      id: set-matrix
      env:
        LATEST_FILE_NAME: ${{ steps.latest-file.outputs.latest }}
      run: |
        cd ./release-versions
        LATEST_FILE=$(cat $LATEST_FILE_NAME)
        echo ::set-output name=matrix::${LATEST_FILE//'%'/'%25'}

  dispatch-backend:
    name: Dispatch Continuous Delivery workflow in backend
    needs: generate-matrix
    runs-on: ubuntu-latest
    env: 
      REPO: ${{fromJson(needs.generate-matrix.outputs.matrix).include[0].repo}}
      TAG: ${{fromJson(needs.generate-matrix.outputs.matrix).include[0].tag}}
    steps:
    - name: test matrix
      id: test-matrix
      run: |
        echo ${{fromJson(needs.generate-matrix.outputs.matrix)}}
        echo $REPO
        echo $TAG

    - name: Set json output
      id: set-json
      env:
        TAG: ${{fromJson(needs.generate-matrix.outputs.matrix).include[0].tag}}
      run: |
        JSON=$(jq --null-input --arg tag "$TAG" '{"tag": $tag, "attemptNumber": 0}')
        echo ::set-output name=json::${JSON//'%'/'%25'}

    # Dispatch deployment
    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        repository: ${{fromJson(needs.generate-matrix.outputs.matrix).include[0].repo}}
        event-type: staging-deployment
        client-payload: ${{steps.set-json.outputs.json}}
    
    # Dispatch status check
    - name: Dispatch Api status check
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        repository: victorggonzalez/workflows
        event-type: check-status
        client-payload: ${{steps.set-json.outputs.json}}

    - name: Wait for check to succeed
      uses: lewagon/wait-on-check-action@v1.0.0
      with:
        ref: ${{ github.ref }}
        check-name: 'Check Api'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 10

    - name: Check api Version and Status before next dispatch
      id: get-status
      run: echo "::set-output name=releasetag::$(curl -s https://api.graasp.org/status)"

    - name: get status
      id: echo-status
      env:
        STATUS: ${{ steps.get-status.outputs.releasetag }}
      run: echo $STATUS
