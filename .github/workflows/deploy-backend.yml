name: TEST new backend to staging environment

# Controls when the action will run.
on:
  workflow_dispatch:

jobs:
  generate-info:
    name: Generate info
    runs-on: ubuntu-latest
    outputs:
      # fileName: ${{ steps.latest-file.outputs.latest }}
      backendRepository: ${{ steps.backend.outputs.backendRepository }}
      backendTag: ${{ steps.backend.outputs.backendTag }}
      stack: ${{ steps.stack-json.outputs.stack }}
    # environment: 
    #   name: staging
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Get latest versions file
      id: latest-file
      run: |
        cd ./release-versions
        LATEST_FILE_NAME=$(ls -Ar | head -n 1)
        echo ::set-output name=latest::${LATEST_FILE_NAME}

    - name: Generate backend info
      id: backend
      env:
        LATEST_FILE_NAME: ${{ steps.latest-file.outputs.latest }}
      run: |
        REPOSITORY=$(jq -r '(.include[:1] | .[] | .repo)' ./release-versions/$LATEST_FILE_NAME)
        echo ::set-output name=backendRepository::${REPOSITORY}
        TAG=$(jq -r '(.include[:1] | .[] | .tag)' ./release-versions/$LATEST_FILE_NAME)
        echo ::set-output name=backendTag::${TAG}
        
    - name: Generate stack json
      id: stack-json
      env:
        LATEST_FILE_NAME: ${{ steps.latest-file.outputs.latest }}
      run: |
        STACK=$(jq '(.include[1:])' ./release-versions/$LATEST_FILE_NAME)
        echo ::set-output name=stack::${STACK//'%'/'%25'}
    
    - name: echo
      id: echo
      run: |
        echo ${{ steps.backend.outputs.backendRepository }}
        echo ${{ steps.backend.outputs.backendTag }}
        echo ${{ steps.stack-json.outputs.stack }}

    - name: Generate
      id: params
      shell: python
      run: |
        versions='[{"repo": "victorggonzalez/demo-app", "tag": "v0.1.1"}]'
        print(f'::set-output name=versions::{versions!s}')
        print("Python jobs:")
        print(versions)

  # dispatch-backend:
  #   name: Dispatch Continuous Delivery workflow in backend
  #   needs: generate-info
  #   runs-on: ubuntu-latest
  #   env: 
  #     REPOSITORY: ${{needs.generate-info.outputs.backendRepository}}
  #     TAG: ${{needs.generate-info.outputs.backendTag}}
  #   steps:
  #   - name: test matrix
  #     id: test-matrix
  #     run: |
  #       echo $REPOSITORY
  #       echo $TAG

  #   - name: Set json output
  #     id: set-json
  #     run: |
  #       JSON=$(jq --null-input --arg tag "$TAG" '{"tag": $tag}')
  #       echo ::set-output name=json::${JSON//'%'/'%25'}

  #   # Dispatch deployment
  #   - name: Repository Dispatch
  #     uses: peter-evans/repository-dispatch@v2
  #     with:
  #       token: ${{ secrets.REPO_ACCESS_TOKEN }}
  #       repository: ${{ env.REPOSITORY }}
  #       event-type: staging-deployment
  #       client-payload: ${{steps.set-json.outputs.json}}

  #   - name: Pause for 25 seconds
  #     run: |
  #       echo "success waiting"
  #       sleep 25

  Parameters:
    name: generate params
    # needs: dispatch-backend
    needs: generate-info
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.params.outputs.versions }}
    # strategy:
    #   matrix:
    #     include: ${{fromJson(needs.generate-info.outputs.stack)}}
    steps:
    - run: echo "$STACK"
      env:
        MATRIX: ${{ needs.generate-info.outputs.stack }}
    - name: Generate
      id: params
      shell: python
      run: |
        versions='[{"repo": "victorggonzalez/demo-app", "tag": "v0.1.1"}]'
        print(f'::set-output name=versions::{versions!s}')
        print("Python jobs:")
        print(versions)

  dispatch-stack:
    name: Dispatch Continuous Delivery workflow in stack
    # needs: dispatch-backend
    needs: Parameters
    runs-on: ubuntu-latest
    # env: 
    #   STACK: ${{fromJson(needs.generate-info.outputs.stack)}}
    strategy:
      matrix:
        include: ${{fromJson(needs.Parameters.outputs.versions)}}
    steps:
    - name: test stack
      id: test-stack
      run: |
        echo $STACK
    - run: echo ${{matrix.repo}}

    - run: echo ${{matrix.tag}}

    # - name: Set json output
    #   id: set-json
    #   env:
    #     TAG: ${{matrix.tag}}
    #   run: |
    #     JSON=$(jq --null-input --arg tag "$TAG" '{"tag": $tag}')
    #     echo ::set-output name=json::${JSON//'%'/'%25'}

    # - name: Repository Dispatch
    #   uses: peter-evans/repository-dispatch@v2
    #   with:
    #     token: ${{ secrets.REPO_ACCESS_TOKEN }}
    #     repository: ${{ matrix.repo }}
    #     event-type: staging-deployment
    #     client-payload: ${{steps.set-json.outputs.json}}

    # # # Dispatch status check
    # # - name: Dispatch Api status check
    # #   uses: peter-evans/repository-dispatch@v2
    # #   with:
    # #     token: ${{ secrets.REPO_ACCESS_TOKEN }}
    # #     repository: victorggonzalez/workflows
    # #     event-type: check-status
    # #     client-payload: '{"tag": "${{ env.TAG }}", "file": "${{ env.LATEST_FILE_NAME }}", "attemptNumber": 1}'
