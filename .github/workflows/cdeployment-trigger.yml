name: Deploy new stack to production environment

# Controls when the action will run.
on:
  workflow_dispatch:

jobs:
  generate-matrix:
    name: Generate matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      latest: ${{ steps.latest-release-file.outputs.latest }}
    environment: 
      name: production
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Get latest release versions file
      id: latest-release-file
      run: |
        cd ./release-versions
        LATEST_FILE_NAME_RELEASE=$(ls -Ar | head -n 1)
        echo ::set-output name=latest::${LATEST_FILE_NAME_RELEASE}

    - name: Generate matrix
      id: set-matrix
      env:
        LATEST_FILE_NAME_RELEASE: ${{ steps.latest-release-file.outputs.latest }}
      run: |
        cd ./release-versions
        LATEST_FILE=$(cat $LATEST_FILE_NAME_RELEASE)
        echo ::set-output name=matrix::${LATEST_FILE//'%'/'%25'}

    - name: echo
      id: echo
      run: |
        echo ${{ steps.set-matrix.outputs.matrix }}

  dispatch:
    name: Dispatch Continuous Deployment workflows
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    steps:
    - run: echo ${{matrix.repo}}

    - run: echo ${{matrix.tag}}

    - name: Set json output
      id: set-json
      env:
        TAG: ${{matrix.tag}}
      run: |
        JSON=$(jq --null-input --arg tag "$TAG" '{"tag": $tag}')
        echo ::set-output name=json::${JSON//'%'/'%25'}

    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        repository: ${{ matrix.repo }}
        event-type: production-deployment
        client-payload: ${{steps.set-json.outputs.json}}

  promote:
    name: Promote stack to production ready
    needs: [generate-matrix, dispatch]
    runs-on: ubuntu-latest
    env:
      LATEST_FILE_NAME_RELEASE: ${{ needs.generate-matrix.outputs.latest }}
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    # Create new release-versions.json file. Use jq to write to stdout and pipe the output to a newly created file.
    - name: Create new release-versions.json file name
      run: | 
        PRODUCTION_FILE_NAME=$(echo "`date +"%Y%m%d%H%M"`"-production-versions.json)
        echo "PRODUCTION_FILE_NAME=$PRODUCTION_FILE_NAME" >> $GITHUB_ENV

    - name: Update latest production versions file
      id: update-latest-production-file
      env:
        RELEASE_FILE_NAME: ${{ env.PRODUCTION_FILE_NAME }}
      run: |
        echo $PRODUCTION_FILE_NAME
        cd ./release-versions
        cp $LATEST_FILE_NAME_RELEASE ../deployed/current-production-versions.json
        cp $LATEST_FILE_NAME_RELEASE ../deployed/$PRODUCTION_FILE_NAME

    - name: Commit step
      id: commit
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        # commit_message: ${{ env.RELEASE_FILE_NAME }}
        commit_message: Deploy new stack to production environment