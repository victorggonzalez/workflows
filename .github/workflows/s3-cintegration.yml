name: zz CI S3 repo

# Controls when the action will run.
on:
  repository_dispatch:
    types: [staging-deployment]
  # Triggers the workflow on push or pull request events but only for the master branch
  # push:
  #   tags:        
  #     - v*

  #pull_request:
  #  branches: [master]

  # Allow the workflow to be reusable
  workflow_call:
    inputs:
      build-folder:
        required: false
        default: 'build'
        type: string
      version:
        required: false
        type: string
      sha:
        required: false
        type: string
    secrets:
      ecr-registry:
        required: false
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-region:
        required: true
      aws-s3-bucket-name:
        required: true
      app-id:
        required: true
      graasp-domain-dev:
        required: true
      cloudfront-distribution:
        required: true
      show-notifications:
        required: false

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

env:
  # default build directory
  BUILD_FOLDER: '${{ inputs.build-folder }}'
  VERSION: '${{ inputs.version }}'

  # rename necessary variables used in the app
  # REACT_APP_APPS_DEVELOPER_ID: ${{ secrets.APPS_DEVELOPER_ID }}
  # REACT_APP_APP_ID: ${{ secrets.APP_ID }}
  # REACT_APP_GOOGLE_ANALYTICS_ID: ${{ secrets.GOOGLE_ANALYTICS_ID }}

jobs:
  build:
    name: Build and sync with S3
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.version }}

    - name: Setup node
      id: setup-node
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        check-latest: true

    # - name: Get Yarn cache path
    #   id: yarn-cache
    #   run: echo "::set-output name=dir::$(yarn cache dir)"

    # - name: Yarn cache
    #   uses: actions/cache@v3
    #   with:
    #     path: ${{ steps.yarn-cache.outputs.dir }}
    #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
    #     restore-keys: |
    #         ${{ runner.os }}-yarn-

    - name: Cache deps
      id: cache-deps
      uses: actions/cache@v3
      env:
        cache-name: deps
      with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-modules-${{ env.cache-name }}-
            ${{ runner.os }}-modules-
            ${{ runner.os }}-

    - name: Install dependencies
      id: install
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        cd result
        npm install --frozen-lockfile

    - name: Yarn build dev
      id: build-image
      run: |
        cd result
        npm run build

    - name: Cache build
      id: cache-build
      uses: actions/cache@v3
      env:
        cache-name: build
      with:
          # path: '**/node_modules'
          # key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          path: result/build
          key: ${{ runner.os }}-build-{{ github.run_id }}-${{ hashFiles('**/build') }}
          restore-keys: |
            ${{ runner.os }}-build-{{ github.run_id }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

  test:
    name: Test
    needs: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        ref: ${{ inputs.version }}

    - name: Cache deps
      id: cache-deps
      uses: actions/cache@v3
      env:
        cache-name: deps
      with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-modules-${{ env.cache-name }}-
            ${{ runner.os }}-modules-
            ${{ runner.os }}-

    - name: Install dependencies
      id: install
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        cd result
        npm install --frozen-lockfile
      
    - name: Test job
      run: |
        echo "This is the test job"
        echo ${{ inputs.build-folder }}
        echo ${{ inputs.version }}
        echo ${{ env.ECR_REGISTRY }}

  deploy: 
    needs: test
    name: Deploy to Dev environment
    runs-on: ubuntu-latest
    steps:
    - name: Cache build
      id: cache-build
      uses: actions/cache@v3
      env:
        cache-name: cache-build
      with:
          path: result/build
          key: ${{ runner.os }}-build-{{ github.run_id }}-${{ hashFiles('**/build') }}
          restore-keys: |
            ${{ runner.os }}-build-{{ github.run_id }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.aws-access-key-id }}
        aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
        aws-region: ${{ secrets.aws-region }}

    - name: Sync files with AWS S3 Bucket
      id: sync-s3
      env:
        # APP_DIR: '${{ secrets.aws-s3-bucket-name }}'
        APP_DIR: '${{ secrets.aws-s3-bucket-name }}'
    # --acl public-read makes files publicly readable 
    # --follow-symlinks fixes some weird symbolic link problems that may come up
    # --delete permanently deletes files in the S3 bucket that are not present in the latest version of the repository/build.
      run: aws s3 sync ${{env.BUILD_FOLDER}} s3://${APP_DIR} --acl public-read --follow-symlinks --delete

    - name: Invalidate cloudfront distribution
      id: invalidate-cloudfront
      run: aws cloudfront create-invalidation --distribution-id ${{ secrets.cloudfront-distribution }} --paths '/*'
