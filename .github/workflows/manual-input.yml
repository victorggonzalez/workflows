# This is a basic workflow that is manually triggered

name: 020-manual-input-workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      stack:
        # Friendly description to be shown in the UI instead of 'stack'
        description: 'Specify a stack to deploy to staging'
        # Default value if no value is explicitly provided
        default: ''
        # Input has to be provided for the workflow to run
        required: false

env:        
  STACK: ${{ inputs.stack }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  greet:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      latest: ${{ steps.latest-staging-file.outputs.latest }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Deploying a specific staging stack
      if: "${{ env.STACK != '' }}"
      run: echo ${{ env.STACK }}

    - name: Check out code
      uses: actions/checkout@v2

    - name: Get latest staging versions file
      id: latest-staging-file
      run: |
        if [[ "${{ inputs.stack }}" == "" ]]; then
          cd ./staging-versions
          LATEST_FILE_NAME_STAGING=$(ls -Ar | head -n 1)
          echo ::set-output name=latest::${LATEST_FILE_NAME_STAGING}
        fi
        if [[ "${{ inputs.stack }}" != "" ]]; then
          LATEST_FILE_NAME_STAGING=${{ env.STACK }}
          echo ::set-output name=latest::${LATEST_FILE_NAME_STAGING}
        fi

    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8 #install the python needed

    - name: execute py script # run the run.py to get the latest data
      run: |
        python compare.py ./staging-versions/$LATEST_FILE_NAME_STAGING ./deployed/current-staging-versions

    - name: Generate matrix
      id: set-matrix
      run: |
        cd ./staging-versions
        LATEST_FILE=$(cat diff-staging.json)
        echo ::set-output name=matrix::${LATEST_FILE//'%'/'%25'}

    - name: echo
      id: echo
      env:
        LATEST_FILE_NAME_STAGING: ${{ steps.latest-staging-file.outputs.latest }}
      run: |
        echo ${{ steps.latest-staging-file.outputs.latest }}
        echo $LATEST_FILE_NAME_STAGING
        echo ${{ steps.set-matrix.outputs.matrix }}
