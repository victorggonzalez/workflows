name: Deploy new stack to staging environment

# Controls when the action will run.
on:
  workflow_dispatch:

jobs:
  generate-matrix:
    name: Generate matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    # environment: 
    #   name: staging
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Get latest versions file
      id: latest-file
      run: |
        cd ./staging-versions
        LATEST_FILE_NAME=$(ls -Ar | head -n 1)
        echo ::set-output name=latest::${LATEST_FILE_NAME}

    - name: Generate matrix
      id: set-matrix
      env:
        LATEST_FILE_NAME: ${{ steps.latest-file.outputs.latest }}
      run: |
        cd ./staging-versions
        LATEST_FILE=$(cat $LATEST_FILE_NAME)
        echo ::set-output name=matrix::${LATEST_FILE//'%'/'%25'}

    - name: echo
      id: echo
      run: |
        echo ${{ steps.set-matrix.outputs.matrix }}

  dispatch:
    name: Dispatch Continuous Delivery workflows
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    steps:
    - run: echo ${{matrix.repo}}

    - run: echo ${{matrix.tag}}

    - name: Set json output
      id: set-json
      env:
        TAG: ${{matrix.tag}}
      run: |
        JSON=$(jq --null-input --arg tag "$TAG" '{"tag": $tag}')
        echo ::set-output name=json::${JSON//'%'/'%25'}

    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        repository: ${{ matrix.repo }}
        event-type: staging-deployment
        client-payload: ${{steps.set-json.outputs.json}}

    # - name: Check api Version and Status before next dispatch
    #   if:  ${{ matrix.repo == 'victorggonzalez/example-voting-app' }} 
    #   run: sleep 60

  test:
    name: Test
    needs: dispatch
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # The environment that the job will reference
    # environment: 
    #   name: staging
    steps:
    # This step runs a single command to execute integation testing
    - name: Test
      run: |
        echo "This is the integration test step"

  promote:
    name: Promote stack to production ready
    needs: test
    runs-on: ubuntu-latest
    # environment: 
    #   name: staging
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - run: |
        cp staging-versions/$LATEST_FILE_NAME release-versions/$LATEST_FILE_NAME 
        cp staging-versions/$LATEST_FILE_NAME deployed/current-release-versions.json

    - name: Commit step
      id: commit
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: ${{ env.LATEST_FILE_NAME }}
        # commit_message: Deploy new stack to staging environment